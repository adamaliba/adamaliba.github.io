<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[第十三周作业]]></title>
    <url>%2F2017%2F12%2F16%2F%E7%AC%AC%E5%8D%81%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[课堂作业：类_时钟【程序】 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;windows.h&gt;using namespace std;class Time&#123;private: int Hour,Minute,Second;public: Time(int h=0,int m=0,int s=0); void Show(); void setMinute(); void setHour(); void setAll(); void runSecond();&#125;;Time::Time(int h,int m,int s)&#123; Hour=h;Minute=m;Second=s;&#125; void Time::runSecond()&#123; Second++; if(Second&gt;59) setMinute(); if(Minute&gt;59) setHour(); if(Hour&gt;23) setAll();&#125;void Time::Show()&#123; cout&lt;&lt;'\r'&lt;&lt;Hour&lt;&lt;"时"&lt;&lt;Minute&lt;&lt;"分"&lt;&lt;Second&lt;&lt;"秒"; &#125;void Time::setMinute()&#123; Minute++; Second=0;&#125;void Time::setHour()&#123; Hour++; Minute=0;&#125;void Time::setAll()&#123; Second=0; Minute=0; Hour=0;&#125;int main()&#123; int h,m,s; cin&gt;&gt;h&gt;&gt;m&gt;&gt;s; Time t(h,m,s); while(1) &#123; t.Show(); t.runSecond(); Sleep(1000); &#125; return 0;&#125; 第八章：日期类【问题描述】 ​ 设计一个日期类(Date)，用来实现日期的操作。包括一个空构造函数，三个成员函数，其余所需自行决定。 ​ 用成员函数setDate()用来给Date类设置日期。 ​ 用成员函数isLeapYear()用来判断是否是闰年。 ​ 用成员函数getSkip(Date o)用来计算两个日期之间相差的天数。 【输入形式】 ​ 输入两个日期，输入格式参考样例。 【输出形式】 ​ 判断两个日期是否是闰年，以及两个日期的间隔天数，输出格式参考样例。【样例输入】 ​ 2012 10 20 ​ 2017 11 07 【样例输出】 ​ 2012 is leap year. ​ 2017 is not leap year. ​ The skip of two date is 1844. 【程序】 李寅霜原创 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;iostream&gt;using namespace std;class Date&#123; private: int year1,year2; int month1,month2; int day1,day2; public: Date(); void setDate(int a,int b,int c,int x,int y,int z); bool isLeapYear(int); void getSkip(Date o); &#125;;Date::Date()&#123;&#125;void Date::setDate(int a,int b,int c,int x,int y,int z)&#123; year1=a; month1=b; day1=c; year2=x; month2=y; day2=z;&#125;bool Date::isLeapYear(int year)&#123; if((year%4==0&amp;&amp;year%100!=0)||(year%400==0)) return true; else return false;&#125;void Date::getSkip(Date o)&#123; int j=0,sum=0,begin=0; int f[12]=&#123;31,28,31,30,31,30,31,31,30,31,30,31&#125;; for(j=1;j&lt;o.month1;j++) begin+=f[j-1]; if(isLeapYear(o.year1)) sum++; if(isLeapYear(o.year1)&amp;&amp;o.month1&gt;2) begin++; begin+=o.day1; if(o.year2&gt;o.year1) sum=sum+365; for(j=o.year1+1;j&lt;o.year2;j++) &#123; sum+=365; if(isLeapYear(j)) sum++; &#125; for(j=1;j&lt;o.month2;j++) &#123; sum+=f[j-1]; &#125; if((isLeapYear(o.year2)&amp;&amp;o.month2&gt;2)&amp;&amp;o.year2&gt;o.year1) sum++; sum+=o.day2; cout&lt;&lt;"The skip of two date is "&lt;&lt;sum-begin&lt;&lt;".";&#125;int main()&#123; Date qaq; int x,y,z,a,b,c; cin&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;a&gt;&gt;b&gt;&gt;c; if((x&lt;a)||(x==a&amp;&amp;y&lt;b)||(x==a&amp;&amp;y==b&amp;&amp;z&lt;c)) qaq.setDate(x,y,z,a,b,c); else qaq.setDate(a,b,c,x,y,z); if(qaq.isLeapYear(x)) cout&lt;&lt;x&lt;&lt;" is leap year."&lt;&lt;endl; else cout&lt;&lt;x&lt;&lt;" is not leap year."&lt;&lt;endl; if(qaq.isLeapYear(a)) cout&lt;&lt;a&lt;&lt;" is leap year."&lt;&lt;endl; else cout&lt;&lt;a&lt;&lt;" is not leap year."&lt;&lt;endl; qaq.getSkip(qaq); return 0;&#125; 第八章：三角形类【问题描述】 先定义一个能描述平面上一条线段的类Beeline，包含私有数据成员为线段两个端点的坐标(X1，Y1，X2，Y2)，在类中定义形参默认值为0的构造函数，计算线段长度的公有成员函数Length()，显示线段两个端点坐标的公有成员函数show()。然后再定义一个能描述平面上三角形的类Triangle，其数据成员为用Beeline定义的对象line1，line2，line3。在类中定义的构造函数要能对对象成员进行初始化。再定义计算三角形面积的函数Area()及显示三条边端点坐标及面积的函数Print()，Print()函数中可调用show()函数显示三条边两端点坐标。 【输入形式】 ​ 输入三角形三个顶点的坐标(x1,y1)、(x2,y2)、(x3,y3)。 ​ 其中 -100 &lt;= x1,x2,x3,y1,y2,y3 &lt;= 100，且为整数。 ​ 在主函数中创建类对象tri(x1,y1,x2,y2,x3,y3)，对应line1(x1, y1, x2, y2),line2(x2,y2,x3,y3),line3(x3,y3,x1,y1)。 【输出形式】 ​ 调用Print()函数，将三角形三条边的端点坐标及面积。面积保留两位小数。 ​ 具体格式见样例。 【样例输入】 ​ 0 0 ​ 0 4 ​ 3 0 【样例输出】 ​ Three edges’ points are listed as follows: ​ (0, 0),(0, 4) ​ (0, 4),(3, 0) ​ (3, 0),(0, 0) ​ The area of this triangle is: 6.00. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;iostream&gt;#include&lt;iomanip&gt;#include&lt;math.h&gt;using namespace std;class Beeline&#123;private: int X1,Y1,X2,Y2;public: Beeline(int x1=0,int y1=0,int x2=0,int y2=0); float Length(); void show();&#125;;Beeline::Beeline(int x1,int y1,int x2,int y2)&#123; X1=x1; Y1=y1; X2=x2; Y2=y2;&#125;float Beeline::Length()&#123; return sqrt((X1-X2)*(X1-X2)*1.0+(Y1-Y2)*(Y1-Y2)*1.0);&#125;void Beeline::show()&#123; cout&lt;&lt;"("&lt;&lt;X1&lt;&lt;", "&lt;&lt;Y1&lt;&lt;"),("&lt;&lt;X2&lt;&lt;", "&lt;&lt;Y2&lt;&lt;")"&lt;&lt;endl;&#125;class Triangle&#123;private: Beeline line1,line2,line3;public: Triangle(int x1,int y1,int x2,int y2,int x3,int y3):line1(x1,y1,x2,y2),line2(x2,y2,x3,y3),line3(x3,y3,x1,y1) &#123;&#125; void Area(); void Print();&#125;;void Triangle::Print()&#123; cout&lt;&lt;"Three edges' points are listed as follows:"&lt;&lt;endl; line1.show(); line2.show(); line3.show();&#125;void Triangle::Area()&#123; float p,pa,pb,pc; p=(line1.Length()+line2.Length()+line3.Length())/2; pa=p-line1.Length(); pb=p-line2.Length(); pc=p-line3.Length(); cout&lt;&lt;"The area of this triangle is: "&lt;&lt;setprecision(2)&lt;&lt;std::fixed&lt;&lt;sqrt(p*pa*pb*pc)&lt;&lt;'.';&#125;int main()&#123; int x1,x2,x3,y1,y2,y3; cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3; Triangle tri(x1,y1,x2,y2,x3,y3); tri.Print(); tri.Area(); return 0;&#125; 第八章：学生成绩类【问题描述】定义学生成绩类Score，其私有数据成员有学号、姓名、物理、数学、外语、平均成绩。补全Score类及主函数，使得程序能在一行中一次输出该生的学号、姓名、物理、数学、外语、平均成绩。 【输入形式】学生的学号、姓名、物理成绩、数学成绩、外语成绩。 【输出形式】除了输入的所有基本信息，还应包括计算的平均成绩。【样例输入】 ​ 081531 WangXiaoming 100 82 99 【样例输出】 ​ 081531 WangXiaoming 100 82 99 93.6667 12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;string&gt; using namespace std; class Score &#123; private: string Id,Name; int Phy,Math,Eng; float Ave;public: Score(string id,string name,int phy,int math,int eng) &#123; Id=id; Name=name; Phy=phy; Math=math; Eng=eng; &#125; void Average() &#123; Ave=(Phy+Math+Eng)/3.0; &#125; void Print() &#123; cout&lt;&lt;Id&lt;&lt;' '&lt;&lt;Name&lt;&lt;' '&lt;&lt;Phy&lt;&lt;' '&lt;&lt;Math&lt;&lt;' '&lt;&lt;Eng&lt;&lt;' '&lt;&lt;Ave; &#125;&#125;;int main() &#123; string id, name; int phy, math, eng; cin &gt;&gt; id &gt;&gt; name &gt;&gt; phy &gt;&gt; math &gt;&gt; eng; Score sco(id, name, phy, math, eng); sco.Average(); sco.Print(); return 0; &#125; 第八章：学生成绩类2【问题描述】设计学生成绩类Score。在主函数中定义学生成绩对象数组s[]。用Sum()计算每个学生的总成绩、用Show()显示每个学生的成绩。增加静态成员函数getAvg()，用于返回学生的总平均分。通过增加合适的成员、修改成员函数等完成这一功能。 【输入形式】 包含一组测试数据。第一行输入一个整数n（1&lt;=n&lt;=100）。 接下来n行。每行先输入一个整数op： 当op==1时，输入x, y, z。代表输入一位新同学i(i从1开始编号)的语文、数学、英语成绩，无需输出。 当op==2时，输入i，输出第i同学的总成绩。数据保证这位同学的成绩已经录入。 当op==3时，输入i，依次输出第i同学的语文数学英语成绩，成绩之间用空格隔开。 当op==4时，输出当前已经录入学生的总平均分，结果保留两位小数。 (1&lt;=n&lt;=100, 1&lt;=id&lt;=10, 1&lt;=op&lt;=3, 0&lt;=x,y,z&lt;=100,全部输入都为整型数) 【输出形式】 当op==2，3，4时，输出所求答案，每个答案占一行。 【样例输入】101 90 85 901 80 90 752 13 241 80 80 851 50 60 651 30 90 753 54 【对应样例输出】 265 80 90 75 255.00 30 90 75 225.00 【程序】 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;cstdlib&gt; using namespace std; class Score&#123; private: int Chinese, Math, English; static int TotalScore; static int TotalStudent; public: Score() &#123;&#125; void setScore (int c, int m, int e) &#123; Chinese=c; Math=m; English=e; TotalScore+=c+m+e; TotalStudent++; &#125; int Sum() &#123; return Chinese+Math+English; &#125; void Show() &#123; cout&lt;&lt;Chinese&lt;&lt;' '&lt;&lt;Math&lt;&lt;' '&lt;&lt;English&lt;&lt;endl; &#125; double static getAve() &#123; return TotalScore*1.0/TotalStudent; &#125; &#125;; int Score::TotalScore=0;int Score::TotalStudent=0;int main() &#123; int n, op, i, c, m, e; cin &gt;&gt; n; int id = 1; Score sco[11]; while(n--) &#123; cin &gt;&gt; op; if(op == 1) &#123; cin &gt;&gt; c &gt;&gt; m &gt;&gt; e; sco[id].setScore(c,m,e); id++; &#125; else if(op == 2) &#123; cin &gt;&gt; i; cout&lt;&lt;sco[i].Sum()&lt;&lt;endl; &#125; else if(op == 3) &#123; cin &gt;&gt; i; sco[i].Show(); &#125; else &#123; printf("%.2f\n", sco[i].getAve()); &#125; &#125; return 0; &#125;]]></content>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 30. African Crossword]]></title>
    <url>%2F2017%2F12%2F11%2FACM-30-African-Crossword%2F</url>
    <content type="text"><![CDATA[【题目】30. African CrosswordAn African crossword is a rectangular table n×m in size. Each cell of the table contains exactly one letter. This table (it is also referred to as grid) contains some encrypted word that needs to be decoded. To solve the crossword you should cross out all repeated letters in rows and columns. In other words, a letter should only be crossed out if and only if the corresponding column or row contains at least one more letter that is exactly the same. Besides, all such letters are crossed out simultaneously. When all repeated letters have been crossed out, we should write the remaining letters in a string. The letters that occupy a higher position follow before the letters that occupy a lower position. If the letters are located in one row, then the letter to the left goes first. The resulting word is the answer to the problem. You are suggested to solve an African crossword and print the word encrypted there. Input The first line contains two integers n and m (1≤n,m≤100). Next n lines contain m lowercase Latin letters each. That is the crossword grid. Output Print the encrypted word on a single line. It is guaranteed that the answer consists of at least one letter. Examples Input 12343 3cbabcdcbc Output 1abcd Input 1234565 5fcofdooedoafaoardcdfeofsf Output 1codeforces 【程序】123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;using namespace std;int main()&#123; int b[100][100]=&#123;0&#125;,i,j,k,l,n,m; char a[100][100]; cin&gt;&gt;n&gt;&gt;m; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) cin&gt;&gt;a[i][j]; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) &#123; if(b[i][j]==0) &#123; for(k=0;k&lt;m;k++) &#123; if(a[i][j]==a[i][k]&amp;&amp;j!=k) &#123; b[i][j]++; b[i][k]++; &#125; &#125; for(l=0;l&lt;n;l++) &#123; if(a[i][j]==a[l][j]&amp;&amp;i!=l) &#123; b[i][j]++; b[l][j]++; &#125; &#125; &#125; &#125; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) if(b[i][j]==0) cout&lt;&lt;a[i][j]; return 0;&#125; 【分析】implementation，strings，难度等级：2 提交一次成功。 由于是100*100以内的数组，并不需要考虑时间；构造一个与原字符数组等价的计数数组，每个非重复字符检查下行列里是否有重复的，重复者在计数数组相应位置加一，最后按顺序输出计数为零的那些字符。]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 3.Hexadecimal's Numbers]]></title>
    <url>%2F2017%2F12%2F11%2FACM-3-Hexadecimal-s-Numbers%2F</url>
    <content type="text"><![CDATA[【题目】3. Hexadecimal’s NumbersOne beautiful July morning a terrible thing happened in Mainframe: a mean virus Megabyte somehow got access to the memory of his not less mean sister Hexadecimal. He loaded there a huge amount of n different natural numbers from 1 to n to obtain total control over her energy. But his plan failed. The reason for this was very simple: Hexadecimal didn’t perceive any information, apart from numbers written in binary format. This means that if a number in a decimal representation contained characters apart from 0 and 1, it was not stored in the memory. Now Megabyte wants to know, how many numbers were loaded successfully. Input Input data contains the only number n (1≤n≤109). Output Output the only number − answer to the problem. Examples Input 110 Output 12 Note For n = 10 the answer includes numbers 1 and 10. 【程序】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;using namespace std;int z=1;void bin(int leng)&#123; int i,t=1; for(i=1;i&lt;leng;i++) t*=2; z+=t; if(leng&gt;1) bin(leng-1); else cout&lt;&lt;z;&#125;int length(int n)&#123; int i=0; while(n&gt;0) &#123; n=n/10; i++; &#125; return i;&#125;int d(int s)&#123; int i=0; while(s&gt;0) &#123; if(s%10!=1&amp;&amp;s%10!=0) i++; s/=10; &#125; return i;&#125;int main()&#123; int n,t=1,i=0,j,s=1,leng; cin&gt;&gt;n; leng=length(n); for(j=1;j&lt;leng;j++) &#123; s*=10; z*=2; &#125; if(s+s/5&lt;n) bin(leng-1); else &#123; while(s&lt;n) &#123; if(t==-1) s+=9; else s+=1; if(d(s)==0&amp;&amp;s&lt;=n) i++; t*=-1; &#125; cout&lt;&lt;i+z; &#125; return 0;&#125; 【分析】brute force，implementation，math]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello, Hexo!]]></title>
    <url>%2F2017%2F12%2F08%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[Hexo+Github搭建博客备忘：​ Hexo 位置 E:blog\ ​ 开启服务器 hexo s 窗口被占用 hexo server -p 5000(端口号) ​ 新建文章 hexo new post “article title” ​ 文章生成及部署 hexo d -g ​ 仍需改进：​ NexT主题更换 ​ 侧边栏配置、图标 ​ 站内搜索功能 ​ 设置作者、站点描述、插入头像图片等 参考博客：​ http://blog.csdn.net/gdutxiaoxu/article/details/53576018 手把手教你用Hexo+Github 搭建属于自己的博客 ​ http://www.jianshu.com/p/e99ed60390a8 20分钟教你使用hexo搭建github博客 ​ http://www.cnblogs.com/fengxiongZz/p/7707219.html 使用Hexo+Github一步步搭建属于自己的博客（基础及进阶） ​ https://hexo.io 官网]]></content>
      <tags>
        <tag>技术实践</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
