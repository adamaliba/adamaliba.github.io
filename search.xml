<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[第十四周实验课]]></title>
    <url>%2F2017%2F12%2F19%2F%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%91%A8%E5%AE%9E%E9%AA%8C%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[实验五（第六章）字符串统计（实践1）【问题描述】 在进行文章重复度检查时，经常需要统计一段英文中的单词数量，并找出长度最长的单词。 设有如下定义：char str[500]; 编写程序，通过利用cin.getline(str,500);实现从键盘输入一小段英文（其中可以包含空格，但在同一行），利用函数统计该段英文中包含几个单词，输出统计出的单词数量、最长单词的长度以及长度最长的单词，空格隔开。 注意：函数声明使用void split(char *str);如果有最长的单词不只一个，输出最先找到的那个。 【输入形式】一小段英文，不要超过500个字符 【输出形式】单词数量、最长单词的长度以及长度最长的单词，空格隔开。 【样例输入】welcome to china university of mining and technology 【样例输出】8 10 university 【程序】 12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;using namespace std;void split(char *str)&#123; int i,j,t=0,l[20],max=0,m=0; for(i=0;*(str+i);i++) &#123; if(*(str+i)==' ') &#123; l[t]=i; t++; &#125; &#125; l[t]=i; max=l[0]; for(j=0;j&lt;t;j++) &#123; if(max&lt;(l[j+1]-l[j])) &#123; max=l[j+1]-l[j]; m=j; &#125; &#125; cout&lt;&lt;t+1&lt;&lt;' '&lt;&lt;max-1&lt;&lt;' '; for(i=l[m]+1;i&lt;l[m+1];i++) cout&lt;&lt;*(str+i); &#125;int main()&#123; char str[500]; cin.getline(str,500); split(str); return 0;&#125; 实验五（第六章）矩阵的转置（实践2）【问题描述】 编程序，按如下方法求A矩阵的转置矩阵B：输入两个正整数m和n，而后通过使用指针配合new运算符生成一个m行n列的二维动态数组A以及另一个n行m列的二维动态数组B，之后为A输入数据（A矩阵数据），逐行逐列输入，进而求出其转置矩阵B（即将A中的行存放成B中的列）并输出结果，逐行逐列输出，每一行数字占一行，同一行的数空格隔开。 注意：输入保证全是整数。 【输入形式】输入m和n,逐行逐列输入数组A的数据【输出形式】逐行逐列输出矩阵B【样例输入】 3 2 119 65 629 679 721 564 【样例输出】 119 629 721 65 679 564 【程序】 123456789101112131415161718#include&lt;iostream&gt;using namespace std;int main()&#123; int m,n,i,j; cin&gt;&gt;m&gt;&gt;n; int (*p)[100]=new int[100][100]; for(i=0;i&lt;m;i++) for(j=0;j&lt;n;j++) cin&gt;&gt;*(*(p+i)+j); for(j=0;j&lt;n;j++) &#123; for(i=0;i&lt;m;i++) cout&lt;&lt;*(*(p+i)+j)&lt;&lt;' '; cout&lt;&lt;endl; &#125; return 0;&#125; 实验五（第六章）找子串最后一次出现的头字符位置（实践4）【问题描述】 编制具有如下原型的函数findLast： ​ char *findLast(char*sourceStr,char*subStr); findLast函数则要返回源串sourceStr中最后一次出现subStr子字符串的头字符位置。 而后编制主函数，输入两个字符串，将它们用作实参来调用这两个函数，如果返回NULL输出-1，否则输出子字符串出现时头字符在原字符串的下标，每个结果占一行。 要求实现程序中不可使用“string.h”头文件内有关寻找子串的标准库函数。 【输入形式】输入源串sourceStr，子字符串subStr。 【输出形式】子字符串subStr最后一次在源串sourceStr中出现的位置 【样例输入】 ​ welcometochinauniversityofminingandtechnology ​ in 【样例输出】29 【程序】 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;using namespace std;char*findLast(char*sourceStr,char*subStr)&#123; int x=0,y=0,i,j,t=0; while(*(sourceStr+x)) x++; x--; while(*(subStr+y)) y++; y--; for(i=x;i&gt;=0;i--) &#123; if(*(sourceStr+i)==*(subStr+y)) &#123; t=0; for(j=0;j&lt;=y;j++) if(*(sourceStr+i-j)!=*(subStr+y-j)) t++; if(t==0) &#123; return sourceStr+i-j+1; break; &#125; &#125; &#125; return NULL;&#125;int main()&#123; char a[500],b[50],*p; cin&gt;&gt;a; cin&gt;&gt;b; p=findLast(a,b); if(p==NULL) cout&lt;&lt;-1; else cout&lt;&lt;p-a; return 0;&#125; 实验五（第六章）复数提取（实践3）【问题描述】 编写如下原型的函数： void split(double x,int*iPart,double*fPart); 提取出数据x的整数部分与小数部分，分别放于iPart与fPart处，由于形参iPart与fPart都是指针，从而可实现将这两个结果“带回”到主函数中。 在主函数中输入一个数输出它的整数部分和小数部分，用空格隔开。 提示：一个double类型数，强制类型转换后就是int，也就是整数部分，差为小数部分。这两个值用指针iPart和指针fPart带回（通过修改指针的目标变量值。） 【输入形式】一个数 【输出形式】整数部分 小数部分，用空格隔开 【样例输入】12.3【样例输出】12 0.3 【程序】 12345678910111213141516171819202122#include&lt;iostream&gt;using namespace std;void split(double x,int*iPart,double*fPart)&#123; int a; double b; a=x; b=x-a; *iPart=a; *fPart=b;&#125;int main()&#123; double x,b,*f; int a,*i; cin&gt;&gt;x; f=&amp;b; i=&amp;a; split(x,i,f); cout&lt;&lt;a&lt;&lt;' '&lt;&lt;b; return 0;&#125; 考试题：复数类【问题描述】自定义一个复数类型Complex，其中含有若干成员函数，使用该类可以完成复数的加法以及对复数的输出。请完成类定义，并编制主函数，说明Complex类对象，对定义的各成员函数进行调用。 class Complex { ​ double real; //复数实部 ​ double imag; //复数虚部 public: ​ Complex (); //无参构造函数，将复数对象的实部和虚部均置为0 ​ Complex (double r, double i); //有参构造函数，设置对象的实部和虚部 ​ Complex AddCom(Complex c2); //调用者对象与对象c2相加，返回Complex类对象 ​ void OutCom () ; //输出调用者对象的有关数据（各分量） }; 具体要求如下： 1、实现有参构造函数 Complex (double r, double i); 2、实现 Complex AddCom(Complex c2); 调用者对象与对象c2相加，返回Complex类对象 3、实现void OutCom () ;实现输出调用者对象的有关数据分量（一定要输出虚部的符号i），如果该数为纯虚数时,不需要输出实部，当虚部为0时，不需要输出实部。 4．编制主函数main，作用有参函数说明类对象cx,cy，使用 Complex 调用AddCom实现复数加法，并将相加的结果调用OutCom方法以复数的形式输出。 【输入形式】输入包括a,b,c,d四个整数，第一个复数为a+bi，第二个复数为c+di 【输出形式】 【样例输入】1 2 3 4 【样例输出】4+6i 【样例说明】当实部和虚部为0时不需要输出0，如2i或5。 【程序】 12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;using namespace std;class Complex&#123; double real; double imag;public: Complex()&#123;&#125; Complex(double r,double i) &#123; real=r; imag=i; &#125; Complex AddCom(Complex c2) &#123; real+=c2.real; imag+=c2.imag; &#125; void OutCom() &#123; if(real==0) cout&lt;&lt;imag&lt;&lt;'i'; else if(imag==0) cout&lt;&lt;real; else cout&lt;&lt;real&lt;&lt;'+'&lt;&lt;imag&lt;&lt;'i'; &#125;&#125;;int main()&#123; int a,b,c,d; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d; Complex c1(a,b); Complex c2(c,d); c1.AddCom(c2); c1.OutCom(); return 0; &#125; 考试题：字符类查找【问题描述】 假设在main函数中有如下的说明（数组a中存放了n个字符串，即名字）： const int n=10; char a[n][31] = {“guo li”, “li na”, “li qi”, “liu yan”, “ma jing”,”sun li juan”, “wang le”, “wu da”, “yang ke”, “zhang yi fu” }; 编制具有如下原型的自定义函数： int search(char (p)[31], int n, char name); 负责在字符串数组 p 的前 n 个字符串（名字）中，查找给定串 name 的出现位置（下标 值）并返回，若p中不出现 name 的话，返回-1。 并编制主函数，输入要查找的某个名字（字符串）name，而后通过如下形式的语句对上 述函数进行调用，之后输出两个结果，空格隔开（出现位置，即下标值。若没查到时，给出提示:输出-1）： int idx = search(a, n, name); //从 a 数组的第一个名字（0 下标）开始查找 int idx = search(a+3, n-3, name); //从 a 数组的第四个名字（3 下标）开始查找 【输入形式】输入一个字符串 【输出形式】若输入的字符串存在，输出该字符串从第0个和第3个名字开始查找分别出现的位置，不存在输出-1， 【样例输入】guo li 【样例输出】0 -1 【样例说明】提交源文件。 【程序】 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;using namespace std;int search(char (*p)[31], int n, char* name)&#123; int i,j,t=0; for(i=0;i&lt;n;i++) &#123; t=0; for(j=0;*(*(p+i)+j);j++) &#123; if(*(*(p+i)+j)!=*(name+j)) t++; &#125; if(t==0) return i; &#125; return -1;&#125;int main()&#123; const int n=10; char a[n][31] = &#123;"guo li", "li na", "li qi", "liu yan", "ma jing","sun li juan", "wang le", "wu da", "yang ke", "zhang yi fu" &#125;; char name[31]; cin.getline(name,31); int idx= search(a, n, name); cout&lt;&lt;idx&lt;&lt;' '; idx = search(a+3, n-3, name); cout&lt;&lt;idx; return 0;&#125;]]></content>
      <tags>
        <tag>实验课</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十三周作业]]></title>
    <url>%2F2017%2F12%2F16%2F%E7%AC%AC%E5%8D%81%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[课堂作业：类_时钟【程序】 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;windows.h&gt;using namespace std;class Time&#123;private: int Hour,Minute,Second;public: Time(int h=0,int m=0,int s=0); void Show(); void setMinute(); void setHour(); void setAll(); void runSecond();&#125;;Time::Time(int h,int m,int s)&#123; Hour=h;Minute=m;Second=s;&#125; void Time::runSecond()&#123; Second++; if(Second&gt;59) setMinute(); if(Minute&gt;59) setHour(); if(Hour&gt;23) setAll();&#125;void Time::Show()&#123; cout&lt;&lt;'\r'&lt;&lt;Hour&lt;&lt;"时"&lt;&lt;Minute&lt;&lt;"分"&lt;&lt;Second&lt;&lt;"秒"; &#125;void Time::setMinute()&#123; Minute++; Second=0;&#125;void Time::setHour()&#123; Hour++; Minute=0;&#125;void Time::setAll()&#123; Second=0; Minute=0; Hour=0;&#125;int main()&#123; int h,m,s; cin&gt;&gt;h&gt;&gt;m&gt;&gt;s; Time t(h,m,s); while(1) &#123; t.Show(); t.runSecond(); Sleep(1000); &#125; return 0;&#125; 第八章：日期类【问题描述】 ​ 设计一个日期类(Date)，用来实现日期的操作。包括一个空构造函数，三个成员函数，其余所需自行决定。 ​ 用成员函数setDate()用来给Date类设置日期。 ​ 用成员函数isLeapYear()用来判断是否是闰年。 ​ 用成员函数getSkip(Date o)用来计算两个日期之间相差的天数。 【输入形式】 ​ 输入两个日期，输入格式参考样例。 【输出形式】 ​ 判断两个日期是否是闰年，以及两个日期的间隔天数，输出格式参考样例。【样例输入】 ​ 2012 10 20 ​ 2017 11 07 【样例输出】 ​ 2012 is leap year. ​ 2017 is not leap year. ​ The skip of two date is 1844. 【程序】 李寅霜原创 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;iostream&gt;using namespace std;class Date&#123; private: int year1,year2; int month1,month2; int day1,day2; public: Date(); void setDate(int a,int b,int c,int x,int y,int z); bool isLeapYear(int); void getSkip(Date o); &#125;;Date::Date()&#123;&#125;void Date::setDate(int a,int b,int c,int x,int y,int z)&#123; year1=a; month1=b; day1=c; year2=x; month2=y; day2=z;&#125;bool Date::isLeapYear(int year)&#123; if((year%4==0&amp;&amp;year%100!=0)||(year%400==0)) return true; else return false;&#125;void Date::getSkip(Date o)&#123; int j=0,sum=0,begin=0; int f[12]=&#123;31,28,31,30,31,30,31,31,30,31,30,31&#125;; for(j=1;j&lt;o.month1;j++) begin+=f[j-1]; if(isLeapYear(o.year1)) sum++; if(isLeapYear(o.year1)&amp;&amp;o.month1&gt;2) begin++; begin+=o.day1; if(o.year2&gt;o.year1) sum=sum+365; for(j=o.year1+1;j&lt;o.year2;j++) &#123; sum+=365; if(isLeapYear(j)) sum++; &#125; for(j=1;j&lt;o.month2;j++) &#123; sum+=f[j-1]; &#125; if((isLeapYear(o.year2)&amp;&amp;o.month2&gt;2)&amp;&amp;o.year2&gt;o.year1) sum++; sum+=o.day2; cout&lt;&lt;"The skip of two date is "&lt;&lt;sum-begin&lt;&lt;".";&#125;int main()&#123; Date qaq; int x,y,z,a,b,c; cin&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;a&gt;&gt;b&gt;&gt;c; if((x&lt;a)||(x==a&amp;&amp;y&lt;b)||(x==a&amp;&amp;y==b&amp;&amp;z&lt;c)) qaq.setDate(x,y,z,a,b,c); else qaq.setDate(a,b,c,x,y,z); if(qaq.isLeapYear(x)) cout&lt;&lt;x&lt;&lt;" is leap year."&lt;&lt;endl; else cout&lt;&lt;x&lt;&lt;" is not leap year."&lt;&lt;endl; if(qaq.isLeapYear(a)) cout&lt;&lt;a&lt;&lt;" is leap year."&lt;&lt;endl; else cout&lt;&lt;a&lt;&lt;" is not leap year."&lt;&lt;endl; qaq.getSkip(qaq); return 0;&#125; 第八章：三角形类【问题描述】 先定义一个能描述平面上一条线段的类Beeline，包含私有数据成员为线段两个端点的坐标(X1，Y1，X2，Y2)，在类中定义形参默认值为0的构造函数，计算线段长度的公有成员函数Length()，显示线段两个端点坐标的公有成员函数show()。然后再定义一个能描述平面上三角形的类Triangle，其数据成员为用Beeline定义的对象line1，line2，line3。在类中定义的构造函数要能对对象成员进行初始化。再定义计算三角形面积的函数Area()及显示三条边端点坐标及面积的函数Print()，Print()函数中可调用show()函数显示三条边两端点坐标。 【输入形式】 ​ 输入三角形三个顶点的坐标(x1,y1)、(x2,y2)、(x3,y3)。 ​ 其中 -100 &lt;= x1,x2,x3,y1,y2,y3 &lt;= 100，且为整数。 ​ 在主函数中创建类对象tri(x1,y1,x2,y2,x3,y3)，对应line1(x1, y1, x2, y2),line2(x2,y2,x3,y3),line3(x3,y3,x1,y1)。 【输出形式】 ​ 调用Print()函数，将三角形三条边的端点坐标及面积。面积保留两位小数。 ​ 具体格式见样例。 【样例输入】 ​ 0 0 ​ 0 4 ​ 3 0 【样例输出】 ​ Three edges’ points are listed as follows: ​ (0, 0),(0, 4) ​ (0, 4),(3, 0) ​ (3, 0),(0, 0) ​ The area of this triangle is: 6.00. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;iostream&gt;#include&lt;iomanip&gt;#include&lt;math.h&gt;using namespace std;class Beeline&#123;private: int X1,Y1,X2,Y2;public: Beeline(int x1=0,int y1=0,int x2=0,int y2=0); float Length(); void show();&#125;;Beeline::Beeline(int x1,int y1,int x2,int y2)&#123; X1=x1; Y1=y1; X2=x2; Y2=y2;&#125;float Beeline::Length()&#123; return sqrt((X1-X2)*(X1-X2)*1.0+(Y1-Y2)*(Y1-Y2)*1.0);&#125;void Beeline::show()&#123; cout&lt;&lt;"("&lt;&lt;X1&lt;&lt;", "&lt;&lt;Y1&lt;&lt;"),("&lt;&lt;X2&lt;&lt;", "&lt;&lt;Y2&lt;&lt;")"&lt;&lt;endl;&#125;class Triangle&#123;private: Beeline line1,line2,line3;public: Triangle(int x1,int y1,int x2,int y2,int x3,int y3):line1(x1,y1,x2,y2),line2(x2,y2,x3,y3),line3(x3,y3,x1,y1) &#123;&#125; void Area(); void Print();&#125;;void Triangle::Print()&#123; cout&lt;&lt;"Three edges' points are listed as follows:"&lt;&lt;endl; line1.show(); line2.show(); line3.show();&#125;void Triangle::Area()&#123; float p,pa,pb,pc; p=(line1.Length()+line2.Length()+line3.Length())/2; pa=p-line1.Length(); pb=p-line2.Length(); pc=p-line3.Length(); cout&lt;&lt;"The area of this triangle is: "&lt;&lt;setprecision(2)&lt;&lt;std::fixed&lt;&lt;sqrt(p*pa*pb*pc)&lt;&lt;'.';&#125;int main()&#123; int x1,x2,x3,y1,y2,y3; cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3; Triangle tri(x1,y1,x2,y2,x3,y3); tri.Print(); tri.Area(); return 0;&#125; 第八章：学生成绩类【问题描述】定义学生成绩类Score，其私有数据成员有学号、姓名、物理、数学、外语、平均成绩。补全Score类及主函数，使得程序能在一行中一次输出该生的学号、姓名、物理、数学、外语、平均成绩。 【输入形式】学生的学号、姓名、物理成绩、数学成绩、外语成绩。 【输出形式】除了输入的所有基本信息，还应包括计算的平均成绩。【样例输入】 ​ 081531 WangXiaoming 100 82 99 【样例输出】 ​ 081531 WangXiaoming 100 82 99 93.6667 12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;string&gt; using namespace std; class Score &#123; private: string Id,Name; int Phy,Math,Eng; float Ave;public: Score(string id,string name,int phy,int math,int eng) &#123; Id=id; Name=name; Phy=phy; Math=math; Eng=eng; &#125; void Average() &#123; Ave=(Phy+Math+Eng)/3.0; &#125; void Print() &#123; cout&lt;&lt;Id&lt;&lt;' '&lt;&lt;Name&lt;&lt;' '&lt;&lt;Phy&lt;&lt;' '&lt;&lt;Math&lt;&lt;' '&lt;&lt;Eng&lt;&lt;' '&lt;&lt;Ave; &#125;&#125;;int main() &#123; string id, name; int phy, math, eng; cin &gt;&gt; id &gt;&gt; name &gt;&gt; phy &gt;&gt; math &gt;&gt; eng; Score sco(id, name, phy, math, eng); sco.Average(); sco.Print(); return 0; &#125; 第八章：学生成绩类2【问题描述】设计学生成绩类Score。在主函数中定义学生成绩对象数组s[]。用Sum()计算每个学生的总成绩、用Show()显示每个学生的成绩。增加静态成员函数getAvg()，用于返回学生的总平均分。通过增加合适的成员、修改成员函数等完成这一功能。 【输入形式】 包含一组测试数据。第一行输入一个整数n（1&lt;=n&lt;=100）。 接下来n行。每行先输入一个整数op： 当op==1时，输入x, y, z。代表输入一位新同学i(i从1开始编号)的语文、数学、英语成绩，无需输出。 当op==2时，输入i，输出第i同学的总成绩。数据保证这位同学的成绩已经录入。 当op==3时，输入i，依次输出第i同学的语文数学英语成绩，成绩之间用空格隔开。 当op==4时，输出当前已经录入学生的总平均分，结果保留两位小数。 (1&lt;=n&lt;=100, 1&lt;=id&lt;=10, 1&lt;=op&lt;=3, 0&lt;=x,y,z&lt;=100,全部输入都为整型数) 【输出形式】 当op==2，3，4时，输出所求答案，每个答案占一行。 【样例输入】101 90 85 901 80 90 752 13 241 80 80 851 50 60 651 30 90 753 54 【对应样例输出】 265 80 90 75 255.00 30 90 75 225.00 【程序】 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;cstdlib&gt; using namespace std; class Score&#123; private: int Chinese, Math, English; static int TotalScore; static int TotalStudent; public: Score() &#123;&#125; void setScore (int c, int m, int e) &#123; Chinese=c; Math=m; English=e; TotalScore+=c+m+e; TotalStudent++; &#125; int Sum() &#123; return Chinese+Math+English; &#125; void Show() &#123; cout&lt;&lt;Chinese&lt;&lt;' '&lt;&lt;Math&lt;&lt;' '&lt;&lt;English&lt;&lt;endl; &#125; double static getAve() &#123; return TotalScore*1.0/TotalStudent; &#125; &#125;; int Score::TotalScore=0;int Score::TotalStudent=0;int main() &#123; int n, op, i, c, m, e; cin &gt;&gt; n; int id = 1; Score sco[11]; while(n--) &#123; cin &gt;&gt; op; if(op == 1) &#123; cin &gt;&gt; c &gt;&gt; m &gt;&gt; e; sco[id].setScore(c,m,e); id++; &#125; else if(op == 2) &#123; cin &gt;&gt; i; cout&lt;&lt;sco[i].Sum()&lt;&lt;endl; &#125; else if(op == 3) &#123; cin &gt;&gt; i; sco[i].Show(); &#125; else &#123; printf("%.2f\n", sco[i].getAve()); &#125; &#125; return 0; &#125;]]></content>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 18.Lucky Numbers]]></title>
    <url>%2F2017%2F12%2F12%2FACM-18-Lucky-Numbers%2F</url>
    <content type="text"><![CDATA[【题目】18. Lucky NumbersPetya loves lucky numbers. Everybody knows that positive integers are lucky if their decimal representation doesn’t contain digits other than 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Lucky number is super lucky if it’s decimal representation contains equal amount of digits 4 and 7. For example, numbers 47, 7744, 474477 are super lucky and 4, 744, 467 are not. One day Petya came across a positive integer n. Help him to find the least super lucky number which is not less than n. Input The only line contains a positive integer n (1≤n≤10100000). This number doesn’t have leading zeroes. Output Output the least super lucky number that is more than or equal to n. Examples Input 14500 Output 14747 Input 147 Output 147 【程序】12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;int main()&#123; string a; char *p; long int leng,i,j,k,s4,s7; cin&gt;&gt;a; p=&amp;a[0]; leng=a.size(); if(leng%2!=0) &#123; for(i=0;i&lt;=leng/2;i++) cout&lt;&lt;4; for(i=0;i&lt;=leng/2;i++) cout&lt;&lt;7; &#125; else&#123; s4=leng/2; s7=s4; for(i=0;i&lt;leng;i++) &#123; if(*p&gt;'7') &#123; for(i=0;i&lt;=leng/2;i++) cout&lt;&lt;4; for(i=0;i&lt;=leng/2;i++) cout&lt;&lt;7; goto end; &#125; if(*(p+i)=='4') s4--; if(*(p+i)=='7') s7--; if(*(p+i)&lt;'4') &#123; if(s4==0) &#123; *(p+i-1)+=1; i=0; s4=leng/2; s7=s4; &#125; else &#123; *(p+i)='4'; s4--; break; &#125; &#125; if(*(p+i)&lt;'7'&amp;&amp;*(p+i)&gt;'4') &#123; if(s7==0) &#123; *(p+i-1)+=1; i=0; s4=leng/2; s7=s4; &#125; else &#123; *(p+i)='7'; s7--; break; &#125; &#125; if(*(p+i)&gt;'7') &#123; i--; if(*(p+i)=='4') s4++; if(*(p+i)=='7') s7++; *(p+i)+=1; i--; &#125; if(s4&lt;0||s7&lt;0) &#123; *(p+i-1)+=1; i=0; s4=leng/2; s7=s4; &#125; &#125; for(j=1;j&lt;=s4;j++) *(p+i+j)='4'; for(k=0;k&lt;s7;k++) *(p+i+j+k)='7'; cout&lt;&lt;a; &#125; end: return 0; &#125; 【分析】dp，greedy 难度等级：2 虽然难度只有2，做了3天，最波折的一道题。 一开始没学指针，完全驾驭不了10^9的字符串；遍历也是不可能的。最后把该数字想象为数位上仅有4和7的三进制数，使从左到右的第一个可更改数，小于4时取4，大于4小于7时取7，大于7时进位。同时考虑7和4的数量相同，于是当4或7不够用时，加大这个数字，从头再来一遍，直到4和7刚刚够用。]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 24. Frames]]></title>
    <url>%2F2017%2F12%2F12%2FACM-24-Frames%2F</url>
    <content type="text"><![CDATA[【题目】24. FramesThroughout Igor K.’s life he has had many situations worthy of attention. We remember the story with the virus, the story of his mathematical career and of course, his famous programming achievements. However, one does not always adopt new hobbies, one can quit something as well. This time Igor K. got disappointed in one of his hobbies: editing and voicing videos. Moreover, he got disappointed in it so much, that he decided to destroy his secret archive for good. Igor K. use Pindows XR operation system which represents files and folders by small icons. At that, m icons can fit in a horizontal row in any window. Igor K.’s computer contains n folders in the D: disk’s root catalog. The folders are numbered from 1 to n in the order from the left to the right and from top to bottom (see the images). At that the folders with secret videos have numbers from a to b inclusive. Igor K. wants to delete them forever, at that making as few frame selections as possible, and then pressing Shift+Delete exactly once. What is the minimum number of times Igor K. will have to select the folder in order to select folders from a to b and only them? Let us note that if some selected folder is selected repeatedly, then it is deselected. Each selection possesses the shape of some rectangle with sides parallel to the screen’s borders. Input The only line contains four integers n, m, a, b (1≤n,m≤109, 1≤a≤b≤n). They are the number of folders in Igor K.’s computer, the width of a window and the numbers of the first and the last folders that need to be deleted. Output Print a single number: the least possible number of times Igor K. will have to select the folders using frames to select only the folders with numbers from a to b. Examples Input 111 4 3 9 Output 13 Input 120 5 2 20 Output 12 【程序】1234567891011121314151617181920212223242526#include&lt;iostream&gt;using namespace std;int main()&#123; int n,m,a,b,z=0; cin&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b; if(b==n) b=n/m*m+m; if((a-1)/m==(b-1)/m) cout&lt;&lt;1; else if((a-1)/m-(b-1)/m==-1) &#123; if((a-1)%m==0&amp;&amp;b%m==0) cout&lt;&lt;1; else cout&lt;&lt;2; &#125; else&#123; z=3; if((a-1)%m==0) z--; if(b%m==0) z--; cout&lt;&lt;z; &#125; return 0; &#125; 【分析】implementation 难度等级：1 第五组数据测试失败，原因是11行两个商减反了。 虽然是一级题，但做起来有困难，主要是把图形转换成商和余数的形式。文件总数n没有意义。]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 30. African Crossword]]></title>
    <url>%2F2017%2F12%2F11%2FACM-30-African-Crossword%2F</url>
    <content type="text"><![CDATA[【题目】30. African CrosswordAn African crossword is a rectangular table n×m in size. Each cell of the table contains exactly one letter. This table (it is also referred to as grid) contains some encrypted word that needs to be decoded. To solve the crossword you should cross out all repeated letters in rows and columns. In other words, a letter should only be crossed out if and only if the corresponding column or row contains at least one more letter that is exactly the same. Besides, all such letters are crossed out simultaneously. When all repeated letters have been crossed out, we should write the remaining letters in a string. The letters that occupy a higher position follow before the letters that occupy a lower position. If the letters are located in one row, then the letter to the left goes first. The resulting word is the answer to the problem. You are suggested to solve an African crossword and print the word encrypted there. Input The first line contains two integers n and m (1≤n,m≤100). Next n lines contain m lowercase Latin letters each. That is the crossword grid. Output Print the encrypted word on a single line. It is guaranteed that the answer consists of at least one letter. Examples Input 12343 3cbabcdcbc Output 1abcd Input 1234565 5fcofdooedoafaoardcdfeofsf Output 1codeforces 【程序】123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;using namespace std;int main()&#123; int b[100][100]=&#123;0&#125;,i,j,k,l,n,m; char a[100][100]; cin&gt;&gt;n&gt;&gt;m; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) cin&gt;&gt;a[i][j]; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) &#123; if(b[i][j]==0) &#123; for(k=0;k&lt;m;k++) &#123; if(a[i][j]==a[i][k]&amp;&amp;j!=k) &#123; b[i][j]++; b[i][k]++; &#125; &#125; for(l=0;l&lt;n;l++) &#123; if(a[i][j]==a[l][j]&amp;&amp;i!=l) &#123; b[i][j]++; b[l][j]++; &#125; &#125; &#125; &#125; for(i=0;i&lt;n;i++) for(j=0;j&lt;m;j++) if(b[i][j]==0) cout&lt;&lt;a[i][j]; return 0;&#125; 【分析】implementation，strings，难度等级：2 提交一次成功，21分钟12秒完成。 由于是100*100以内的数组，并不需要考虑时间；构造一个与原字符数组等价的计数数组，每个非重复字符检查下行列里是否有重复的，重复者在计数数组相应位置加一，最后按顺序输出计数为零的那些字符。]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM 3.Hexadecimal's Numbers]]></title>
    <url>%2F2017%2F12%2F11%2FACM-3-Hexadecimal-s-Numbers%2F</url>
    <content type="text"><![CDATA[【题目】3.Hexadecimal’s NumbersOne beautiful July morning a terrible thing happened in Mainframe: a mean virus Megabyte somehow got access to the memory of his not less mean sister Hexadecimal. He loaded there a huge amount of n different natural numbers from 1 to n to obtain total control over her energy. But his plan failed. The reason for this was very simple: Hexadecimal didn’t perceive any information, apart from numbers written in binary format. This means that if a number in a decimal representation contained characters apart from 0 and 1, it was not stored in the memory. Now Megabyte wants to know, how many numbers were loaded successfully. Input Input data contains the only number n (1≤n≤109). Output Output the only number − answer to the problem. Examples Input 110 Output 12 Note For n = 10 the answer includes numbers 1 and 10. 【程序】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;using namespace std;int z=1;void bin(int leng)&#123; int i,t=1; for(i=1;i&lt;leng;i++) t*=2; z+=t; if(leng&gt;1) bin(leng-1); else cout&lt;&lt;z;&#125;int length(int n)&#123; int i=0; while(n&gt;0) &#123; n=n/10; i++; &#125; return i;&#125;int d(int s)&#123; int i=0; while(s&gt;0) &#123; if(s%10!=1&amp;&amp;s%10!=0) i++; s/=10; &#125; return i;&#125;int main()&#123; int n,t=1,i=0,j,s=1,leng; cin&gt;&gt;n; leng=length(n); for(j=1;j&lt;leng;j++) &#123; s*=10; z*=2; &#125; if(s+s/5&lt;n) bin(leng-1); else &#123; while(s&lt;n) &#123; if(t==-1) s+=9; else s+=1; if(d(s)==0&amp;&amp;s&lt;=n) i++; t*=-1; &#125; cout&lt;&lt;i+z; &#125; return 0;&#125; 【分析】brute force，implementation，math]]></content>
      <tags>
        <tag>ACM</tag>
        <tag>CGOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello, Hexo!]]></title>
    <url>%2F2017%2F12%2F08%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[Hexo+Github搭建博客备忘：​ Hexo 位置 E:blog\ ​ 开启服务器 hexo s 窗口被占用 hexo server -p 5000(端口号) ​ 新建文章 hexo new post “article title” ​ 文章生成及部署 hexo d -g ​ 仍需改进：​ NexT主题更换 ​ 侧边栏配置、图标 ​ 站内搜索功能 ​ 设置作者、站点描述、插入头像图片等 参考博客：​ http://blog.csdn.net/gdutxiaoxu/article/details/53576018 手把手教你用Hexo+Github 搭建属于自己的博客 ​ http://www.jianshu.com/p/e99ed60390a8 20分钟教你使用hexo搭建github博客 ​ http://www.cnblogs.com/fengxiongZz/p/7707219.html 使用Hexo+Github一步步搭建属于自己的博客（基础及进阶） ​ https://hexo.io 官网]]></content>
      <tags>
        <tag>技术实践</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
